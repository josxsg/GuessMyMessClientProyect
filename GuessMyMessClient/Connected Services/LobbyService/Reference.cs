//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuessMyMessClient.LobbyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyStateDto", Namespace="http://schemas.datacontract.org/2004/07/GuessMyMessServer.Contracts.DataContracts" +
        "")]
    [System.SerializableAttribute()]
    public partial class LobbyStateDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DifficultyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MatchCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PlayerUsernamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentPlayers {
            get {
                return this.CurrentPlayersField;
            }
            set {
                if ((this.CurrentPlayersField.Equals(value) != true)) {
                    this.CurrentPlayersField = value;
                    this.RaisePropertyChanged("CurrentPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Difficulty {
            get {
                return this.DifficultyField;
            }
            set {
                if ((object.ReferenceEquals(this.DifficultyField, value) != true)) {
                    this.DifficultyField = value;
                    this.RaisePropertyChanged("Difficulty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostUsername {
            get {
                return this.HostUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostUsernameField, value) != true)) {
                    this.HostUsernameField = value;
                    this.RaisePropertyChanged("HostUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MatchCode {
            get {
                return this.MatchCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MatchCodeField, value) != true)) {
                    this.MatchCodeField = value;
                    this.RaisePropertyChanged("MatchCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MatchName {
            get {
                return this.MatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MatchNameField, value) != true)) {
                    this.MatchNameField = value;
                    this.RaisePropertyChanged("MatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayers {
            get {
                return this.MaxPlayersField;
            }
            set {
                if ((this.MaxPlayersField.Equals(value) != true)) {
                    this.MaxPlayersField = value;
                    this.RaisePropertyChanged("MaxPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PlayerUsernames {
            get {
                return this.PlayerUsernamesField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerUsernamesField, value) != true)) {
                    this.PlayerUsernamesField = value;
                    this.RaisePropertyChanged("PlayerUsernames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessageDto", Namespace="http://schemas.datacontract.org/2004/07/GuessMyMessServer.Contracts.DataContracts" +
        "")]
    [System.SerializableAttribute()]
    public partial class ChatMessageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageContent {
            get {
                return this.MessageContentField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageContentField, value) != true)) {
                    this.MessageContentField = value;
                    this.RaisePropertyChanged("MessageContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderUsername {
            get {
                return this.SenderUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderUsernameField, value) != true)) {
                    this.SenderUsernameField = value;
                    this.RaisePropertyChanged("SenderUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LobbyService.ILobbyService", CallbackContract=typeof(GuessMyMessClient.LobbyService.ILobbyServiceCallback))]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/ConnectToLobby")]
        void ConnectToLobby(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/ConnectToLobby")]
        System.Threading.Tasks.Task ConnectToLobbyAsync(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SendLobbyMessage")]
        void SendLobbyMessage(string senderUsername, string matchId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SendLobbyMessage")]
        System.Threading.Tasks.Task SendLobbyMessageAsync(string senderUsername, string matchId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartGame")]
        void StartGame(string hostUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(string hostUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/LeaveLobby")]
        void LeaveLobby(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/LeaveLobby")]
        System.Threading.Tasks.Task LeaveLobbyAsync(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/KickPlayer")]
        void KickPlayer(string hostUsername, string playerToKickUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/KickPlayer")]
        System.Threading.Tasks.Task KickPlayerAsync(string hostUsername, string playerToKickUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartKickVote")]
        void StartKickVote(string voterUsername, string targetUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartKickVote")]
        System.Threading.Tasks.Task StartKickVoteAsync(string voterUsername, string targetUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SubmitKickVote")]
        void SubmitKickVote(string voterUsername, string targetUsername, string matchId, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SubmitKickVote")]
        System.Threading.Tasks.Task SubmitKickVoteAsync(string voterUsername, string targetUsername, string matchId, bool vote);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UpdateLobbyState")]
        void UpdateLobbyState(GuessMyMessClient.LobbyService.LobbyStateDto lobbyStateDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/ReceiveLobbyMessage")]
        void ReceiveLobbyMessage(GuessMyMessClient.LobbyService.ChatMessageDto messageDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/OnGameStarting")]
        void OnGameStarting(int countdownSeconds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/OnGameStarted")]
        void OnGameStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/KickedFromLobby")]
        void KickedFromLobby(string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UpdateKickVote")]
        void UpdateKickVote(string targetUsername, int currentVotes, int votesNeeded);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : GuessMyMessClient.LobbyService.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<GuessMyMessClient.LobbyService.ILobbyService>, GuessMyMessClient.LobbyService.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToLobby(string username, string matchId) {
            base.Channel.ConnectToLobby(username, matchId);
        }
        
        public System.Threading.Tasks.Task ConnectToLobbyAsync(string username, string matchId) {
            return base.Channel.ConnectToLobbyAsync(username, matchId);
        }
        
        public void SendLobbyMessage(string senderUsername, string matchId, string message) {
            base.Channel.SendLobbyMessage(senderUsername, matchId, message);
        }
        
        public System.Threading.Tasks.Task SendLobbyMessageAsync(string senderUsername, string matchId, string message) {
            return base.Channel.SendLobbyMessageAsync(senderUsername, matchId, message);
        }
        
        public void StartGame(string hostUsername, string matchId) {
            base.Channel.StartGame(hostUsername, matchId);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string hostUsername, string matchId) {
            return base.Channel.StartGameAsync(hostUsername, matchId);
        }
        
        public void LeaveLobby(string username, string matchId) {
            base.Channel.LeaveLobby(username, matchId);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(string username, string matchId) {
            return base.Channel.LeaveLobbyAsync(username, matchId);
        }
        
        public void KickPlayer(string hostUsername, string playerToKickUsername, string matchId) {
            base.Channel.KickPlayer(hostUsername, playerToKickUsername, matchId);
        }
        
        public System.Threading.Tasks.Task KickPlayerAsync(string hostUsername, string playerToKickUsername, string matchId) {
            return base.Channel.KickPlayerAsync(hostUsername, playerToKickUsername, matchId);
        }
        
        public void StartKickVote(string voterUsername, string targetUsername, string matchId) {
            base.Channel.StartKickVote(voterUsername, targetUsername, matchId);
        }
        
        public System.Threading.Tasks.Task StartKickVoteAsync(string voterUsername, string targetUsername, string matchId) {
            return base.Channel.StartKickVoteAsync(voterUsername, targetUsername, matchId);
        }
        
        public void SubmitKickVote(string voterUsername, string targetUsername, string matchId, bool vote) {
            base.Channel.SubmitKickVote(voterUsername, targetUsername, matchId, vote);
        }
        
        public System.Threading.Tasks.Task SubmitKickVoteAsync(string voterUsername, string targetUsername, string matchId, bool vote) {
            return base.Channel.SubmitKickVoteAsync(voterUsername, targetUsername, matchId, vote);
        }
    }
}
