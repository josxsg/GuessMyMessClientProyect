//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuessMyMessClient.LobbyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyStateDto", Namespace="http://schemas.datacontract.org/2004/07/GuessMyMessServer.Contracts.DataContracts" +
        "")]
    [System.SerializableAttribute()]
    public partial class LobbyStateDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GuessMyMessClient.LobbyService.LobbySettingsDto currentSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hostUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lobbyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] playersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GuessMyMessClient.LobbyService.LobbySettingsDto currentSettings {
            get {
                return this.currentSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.currentSettingsField, value) != true)) {
                    this.currentSettingsField = value;
                    this.RaisePropertyChanged("currentSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostUsername {
            get {
                return this.hostUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.hostUsernameField, value) != true)) {
                    this.hostUsernameField = value;
                    this.RaisePropertyChanged("hostUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lobbyId {
            get {
                return this.lobbyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.lobbyIdField, value) != true)) {
                    this.lobbyIdField = value;
                    this.RaisePropertyChanged("lobbyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] players {
            get {
                return this.playersField;
            }
            set {
                if ((object.ReferenceEquals(this.playersField, value) != true)) {
                    this.playersField = value;
                    this.RaisePropertyChanged("players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbySettingsDto", Namespace="http://schemas.datacontract.org/2004/07/GuessMyMessServer.Contracts.DataContracts" +
        "")]
    [System.SerializableAttribute()]
    public partial class LobbySettingsDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int difficultyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPrivateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string matchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int maxPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int roundsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int difficultyId {
            get {
                return this.difficultyIdField;
            }
            set {
                if ((this.difficultyIdField.Equals(value) != true)) {
                    this.difficultyIdField = value;
                    this.RaisePropertyChanged("difficultyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                if ((this.isPrivateField.Equals(value) != true)) {
                    this.isPrivateField = value;
                    this.RaisePropertyChanged("isPrivate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string matchName {
            get {
                return this.matchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.matchNameField, value) != true)) {
                    this.matchNameField = value;
                    this.RaisePropertyChanged("matchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int maxPlayers {
            get {
                return this.maxPlayersField;
            }
            set {
                if ((this.maxPlayersField.Equals(value) != true)) {
                    this.maxPlayersField = value;
                    this.RaisePropertyChanged("maxPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int rounds {
            get {
                return this.roundsField;
            }
            set {
                if ((this.roundsField.Equals(value) != true)) {
                    this.roundsField = value;
                    this.RaisePropertyChanged("rounds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessageDto", Namespace="http://schemas.datacontract.org/2004/07/GuessMyMessServer.Contracts.DataContracts" +
        "")]
    [System.SerializableAttribute()]
    public partial class ChatMessageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPredefinedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string senderUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPredefined {
            get {
                return this.isPredefinedField;
            }
            set {
                if ((this.isPredefinedField.Equals(value) != true)) {
                    this.isPredefinedField = value;
                    this.RaisePropertyChanged("isPredefined");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string senderUsername {
            get {
                return this.senderUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.senderUsernameField, value) != true)) {
                    this.senderUsernameField = value;
                    this.RaisePropertyChanged("senderUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LobbyService.ILobbyService", CallbackContract=typeof(GuessMyMessClient.LobbyService.ILobbyServiceCallback))]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/connectToLobby")]
        void connectToLobby(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/connectToLobby")]
        System.Threading.Tasks.Task connectToLobbyAsync(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/sendLobbyMessage")]
        void sendLobbyMessage(string senderUsername, string matchId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/sendLobbyMessage")]
        System.Threading.Tasks.Task sendLobbyMessageAsync(string senderUsername, string matchId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/startGame")]
        void startGame(string hostUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/startGame")]
        System.Threading.Tasks.Task startGameAsync(string hostUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/leaveLobby")]
        void leaveLobby(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/leaveLobby")]
        System.Threading.Tasks.Task leaveLobbyAsync(string username, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/kickPlayer")]
        void kickPlayer(string hostUsername, string playerToKickUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/kickPlayer")]
        System.Threading.Tasks.Task kickPlayerAsync(string hostUsername, string playerToKickUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/startKickVote")]
        void startKickVote(string voterUsername, string targetUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/startKickVote")]
        System.Threading.Tasks.Task startKickVoteAsync(string voterUsername, string targetUsername, string matchId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/submitKickVote")]
        void submitKickVote(string voterUsername, string targetUsername, string matchId, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/submitKickVote")]
        System.Threading.Tasks.Task submitKickVoteAsync(string voterUsername, string targetUsername, string matchId, bool vote);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/updateLobbyState")]
        void updateLobbyState(GuessMyMessClient.LobbyService.LobbyStateDto lobbyStateDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/receiveLobbyMessage")]
        void receiveLobbyMessage(GuessMyMessClient.LobbyService.ChatMessageDto messageDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/onGameStarting")]
        void onGameStarting(int countdownSeconds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/onGameStarted")]
        void onGameStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/kickedFromLobby")]
        void kickedFromLobby(string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/updateKickVote")]
        void updateKickVote(string targetUsername, int currentVotes, int votesNeeded);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : GuessMyMessClient.LobbyService.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<GuessMyMessClient.LobbyService.ILobbyService>, GuessMyMessClient.LobbyService.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void connectToLobby(string username, string matchId) {
            base.Channel.connectToLobby(username, matchId);
        }
        
        public System.Threading.Tasks.Task connectToLobbyAsync(string username, string matchId) {
            return base.Channel.connectToLobbyAsync(username, matchId);
        }
        
        public void sendLobbyMessage(string senderUsername, string matchId, string message) {
            base.Channel.sendLobbyMessage(senderUsername, matchId, message);
        }
        
        public System.Threading.Tasks.Task sendLobbyMessageAsync(string senderUsername, string matchId, string message) {
            return base.Channel.sendLobbyMessageAsync(senderUsername, matchId, message);
        }
        
        public void startGame(string hostUsername, string matchId) {
            base.Channel.startGame(hostUsername, matchId);
        }
        
        public System.Threading.Tasks.Task startGameAsync(string hostUsername, string matchId) {
            return base.Channel.startGameAsync(hostUsername, matchId);
        }
        
        public void leaveLobby(string username, string matchId) {
            base.Channel.leaveLobby(username, matchId);
        }
        
        public System.Threading.Tasks.Task leaveLobbyAsync(string username, string matchId) {
            return base.Channel.leaveLobbyAsync(username, matchId);
        }
        
        public void kickPlayer(string hostUsername, string playerToKickUsername, string matchId) {
            base.Channel.kickPlayer(hostUsername, playerToKickUsername, matchId);
        }
        
        public System.Threading.Tasks.Task kickPlayerAsync(string hostUsername, string playerToKickUsername, string matchId) {
            return base.Channel.kickPlayerAsync(hostUsername, playerToKickUsername, matchId);
        }
        
        public void startKickVote(string voterUsername, string targetUsername, string matchId) {
            base.Channel.startKickVote(voterUsername, targetUsername, matchId);
        }
        
        public System.Threading.Tasks.Task startKickVoteAsync(string voterUsername, string targetUsername, string matchId) {
            return base.Channel.startKickVoteAsync(voterUsername, targetUsername, matchId);
        }
        
        public void submitKickVote(string voterUsername, string targetUsername, string matchId, bool vote) {
            base.Channel.submitKickVote(voterUsername, targetUsername, matchId, vote);
        }
        
        public System.Threading.Tasks.Task submitKickVoteAsync(string voterUsername, string targetUsername, string matchId, bool vote) {
            return base.Channel.submitKickVoteAsync(voterUsername, targetUsername, matchId, vote);
        }
    }
}
